[
    {
        "id": 1,
        "question": "What is the purpose of React Router?",
        "answer": "React router gives the functionality of routing in a spa application. In traditional websites, the browser requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server. When the user clicks a link, it starts the process all over again for a new page.Client side routing allows your app to update the URL from a link click without making another request for another document from the server. Instead, your app can immediately render some new UI and make data requests with fetch to update the page with new information.This enables faster user experiences because the browser doesn't need to request an entirely new document or re-evaluate CSS and JavaScript assets for the next page. It also enables more dynamic user experiences with things like animation."
    },
    {
        "id": 2,
        "question": "How does Context API works?",
        "answer": "Context API is primarily used when some data needs to be accessible by many components at different nesting levels. Context provides a way to pass data through the component tree without having to pass props down manually at every level. React.createContext Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree. Context.Provider Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes. The Provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree. useContext Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest <MyContext.Provider> above the calling component in the tree."
    },
    {
        "id": 3,
        "question": "How does useRef works?",
        "answer": "The useRef Hook allows you to persist values between renders. It can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly.If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render. To avoid this, we can use the useRef Hook. useRef(initialValue) is a built-in React hook that accepts one argument as the initial value and returns a reference. A reference is an object having a special property current. reference.current accesses the reference value, and reference.current = newValue updates the reference value. The value of the reference is stays the same between component re-renderings. Updating a reference doesn't trigger a component re-rendering."
    }
]